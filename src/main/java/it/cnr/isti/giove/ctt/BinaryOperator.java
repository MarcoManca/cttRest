//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.09.17 at 01:02:19 PM CEST 
//


package it.cnr.isti.giove.ctt;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for BinaryOperator.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="BinaryOperator">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="and"/>
 *     &lt;enumeration value="or"/>
 *     &lt;enumeration value="xor"/>
 *     &lt;enumeration value="contains"/>
 *     &lt;enumeration value="starts"/>
 *     &lt;enumeration value="ends"/>
 *     &lt;enumeration value="gt"/>
 *     &lt;enumeration value="gteq"/>
 *     &lt;enumeration value="lteq"/>
 *     &lt;enumeration value="lt"/>
 *     &lt;enumeration value="eq"/>
 *     &lt;enumeration value="neq"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "BinaryOperator")
@XmlEnum
public enum BinaryOperator {

    @XmlEnumValue("and")
    AND("and"),
    @XmlEnumValue("or")
    OR("or"),
    @XmlEnumValue("xor")
    XOR("xor"),
    @XmlEnumValue("contains")
    CONTAINS("contains"),
    @XmlEnumValue("starts")
    STARTS("starts"),
    @XmlEnumValue("ends")
    ENDS("ends"),
    @XmlEnumValue("gt")
    GT("gt"),
    @XmlEnumValue("gteq")
    GTEQ("gteq"),
    @XmlEnumValue("lteq")
    LTEQ("lteq"),
    @XmlEnumValue("lt")
    LT("lt"),
    @XmlEnumValue("eq")
    EQ("eq"),
    @XmlEnumValue("neq")
    NEQ("neq");
    private final String value;

    BinaryOperator(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static BinaryOperator fromValue(String v) {
        for (BinaryOperator c: BinaryOperator.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
